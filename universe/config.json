
{
  "type": "object",
  "properties": {
    "service": {
      "type": "object",
      "description": "DC/OS service configuration properties",
      "properties": {
        "name": {
          "description": "The name of the service instance",
          "type": "string",
          "default": "hivemq",
          "title": "Service name"
        },
        "user": {
          "description": "The user that the service will run as.",
          "type": "string",
          "default": "root",
          "title": "User"
        },
        "service_account": {
          "description": "The service account for DC/OS service authentication. This is typically left empty to use the default unless service authentication is needed. The value given here is passed as the principal of Mesos framework.",
          "type": "string",
          "default": ""
        },
        "service_account_secret": {
          "description": "Name of the Secret Store credentials to use for DC/OS service authentication. This should be left empty unless service authentication is needed.",
          "type": "string",
          "default": "",
          "title": "Credential secret name (optional)"
        },
        "virtual_network_enabled": {
          "description": "Enable virtual networking",
          "type": "boolean",
          "default": false
        },
        "virtual_network_name": {
          "description": "The name of the virtual network to join",
          "type": "string",
          "default": "dcos"
        },
        "virtual_network_plugin_labels": {
          "description": "Labels to pass to the virtual network plugin. Comma-separated key:value pairs. For example: k_0:v_0,k_1:v_1,...,k_n:v_n",
          "type": "string",
          "default": ""
        },
        "log_level": {
          "description": "The log level for the DC/OS service.",
          "type": "string",
          "enum": [
            "OFF",
            "FATAL",
            "ERROR",
            "WARN",
            "INFO",
            "DEBUG",
            "TRACE",
            "ALL"
          ],
          "default": "INFO"
        },
        "sleep": {
          "description": "The sleep duration in seconds before tasks exit.",
          "type": "number",
          "default": 1000
        }
      },
      "required": [
        "name",
        "sleep",
        "user"
      ]
    },
    "node": {
      "description": "HiveMQ pod configuration properties",
      "type": "object",
      "properties": {
        "count": {
          "title": "Node count",
          "description": "Number of hivemq pods to run",
          "type": "integer",
          "default":  2
        },
        "image": {
          "title": "HiveMQ image",
          "description": "Image to use for the hivemq pods",
          "type": "string",
          "default": "sbaier1/hivemq-mtest20:latest"
        },
        "placement_constraint": {
          "title": "Placement constraint",
          "description": "Placement constraints for nodes. Example: [[\"hostname\", \"UNIQUE\"]]",
          "type": "string",
          "default": "[]",
          "media": {
            "type": "application/x-zone-constraints+json"
          }
        },
        "cpus": {
          "title": "CPU count",
          "description": "hivemq pod CPU requirements",
          "type": "number",
          "default": 1
        },
        "mem": {
          "title": "Memory size (MB)",
          "description": "hivemq pod mem requirements (in MB)",
          "type": "integer",
          "default": 512
        },
        "disk": {
          "title": "Disk size (MB)",
          "description": "hivemq pod persistent disk requirements (in MB)",
          "type": "integer",
          "default": 250
        },
        "disk_type": {
          "title": "Disk type [ROOT, MOUNT]",
          "description": "Mount volumes require preconfiguration in DC/OS",
          "enum": [
            "ROOT",
            "MOUNT"
          ],
          "default": "ROOT"
        }
      },
      "required": [
        "count",
        "cpus",
        "mem",
        "disk",
        "disk_type"
      ]
    },
    "hivemq": {
      "description": "HiveMQ specific configuration properties",
      "type": "object",
      "properties": {
        "cluster_replica_count": {
          "title": "Cluster replica count",
          "description": "Number of cluster replica",
          "type": "integer",
          "default": 2,
          "minimum": 1
        },
        "cluster_overload_protection": {
          "title": "Cluster overload protection",
          "description": "Enable cluster overload protection",
          "type": "boolean",
          "default": true
        },
        "max_client_id_length": {
          "title": "Max client id length",
          "description": "Maximum client id length in bytes",
          "type": "integer",
          "default": 65535
        },
        "max_topic_length": {
          "title": "Max topic length",
          "description": "Maximum topic length in bytes",
          "type": "integer",
          "default": 65535
        },
        "max_connections": {
          "title": "Max connections",
          "description": "Maximum total MQTT connections for a single broker",
          "type": "integer",
          "default": -1
        },
        "incoming_bandwidth_throttling": {
          "title": "Incoming bandwidth throttling",
          "description": "Incoming bandwidth maximum bytes per second",
          "type": "integer",
          "default": 0
        },
        "no_connect_idle_timeout": {
          "title": "CONNECT idle timeout",
          "description": "Timeout in milliseconds before disconnecting a client which doesn't send a CONNECT packet",
          "type": "integer",
          "default": 10000
        },
        "session_expiry_interval": {
          "title": "Session expiry interval",
          "description": "Duration (in seconds) that has to pass after the client disconnected, before its session expires",
          "type": "integer",
          "default": 4294967296
        },
        "max_packet_size": {
          "title": "Max packet size",
          "description": "The maximum size of any MQTT packet in bytes that will be accepted by the broker",
          "type": "integer",
          "default": 268435460
        },
        "server_receive_maximum": {
          "title": "Server receive maximum",
          "description": "The maximum amount of PUBLISH messages, which have not yet been acknowledged by the broker, each client is allowed to send",
          "type": "integer",
          "default": 10
        },
        "keepalive_max": {
          "title": "Keep alive maximum",
          "description": "The maximum value of the keepAlive field in the CONNECT packet of the client that will be accepted by the broker",
          "type": "integer",
          "default": 65535
        },
        "keepalive_allow_unlimited": {
          "title": "Keep alive allow unlimited",
          "description": "Whether or not the broker will accept connections by clients that sent a CONNECT packet with a keepAlive=0 setting",
          "type": "boolean",
          "default": true
        },
        "topic_alias_enabled": {
          "title": "Topic alias enabled",
          "description": "Whether or not the broker will allow MQTT 5 clients to use topic-alias",
          "type": "boolean",
          "default": true
        },
        "topic_alias_max_per_client": {
          "title": "Topic alias max per client",
          "description": "Maximum topic aliases a single client can use",
          "type": "integer",
          "default": 5
        },
        "subscription_identifier_enabled": {
          "title": "Subscription identifier enabled",
          "description": "Whether or not the broker will allow MQTT 5 clients to use subscription identifiers",
          "type": "boolean",
          "default": true
        },

      }
    }
  }
}
